// Code generated by mockery v2.37.0. DO NOT EDIT.

package mocks

import (
	limiter "github.com/petrenko-alex/api-rate-limiter/internal/limiter"
	mock "github.com/stretchr/testify/mock"
)

// MockILimitStorage is an autogenerated mock type for the ILimitStorage type
type MockILimitStorage struct {
	mock.Mock
}

type MockILimitStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILimitStorage) EXPECT() *MockILimitStorage_Expecter {
	return &MockILimitStorage_Expecter{mock: &_m.Mock}
}

// GetLimits provides a mock function with given fields:
func (_m *MockILimitStorage) GetLimits() (*limiter.Limits, error) {
	ret := _m.Called()

	var r0 *limiter.Limits
	var r1 error
	if rf, ok := ret.Get(0).(func() (*limiter.Limits, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *limiter.Limits); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*limiter.Limits)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockILimitStorage_GetLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLimits'
type MockILimitStorage_GetLimits_Call struct {
	*mock.Call
}

// GetLimits is a helper method to define mock.On call
func (_e *MockILimitStorage_Expecter) GetLimits() *MockILimitStorage_GetLimits_Call {
	return &MockILimitStorage_GetLimits_Call{Call: _e.mock.On("GetLimits")}
}

func (_c *MockILimitStorage_GetLimits_Call) Run(run func()) *MockILimitStorage_GetLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILimitStorage_GetLimits_Call) Return(_a0 *limiter.Limits, _a1 error) *MockILimitStorage_GetLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockILimitStorage_GetLimits_Call) RunAndReturn(run func() (*limiter.Limits, error)) *MockILimitStorage_GetLimits_Call {
	_c.Call.Return(run)
	return _c
}

// GetLimitsByTypes provides a mock function with given fields: _a0
func (_m *MockILimitStorage) GetLimitsByTypes(_a0 []string) (*limiter.Limits, error) {
	ret := _m.Called(_a0)

	var r0 *limiter.Limits
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*limiter.Limits, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]string) *limiter.Limits); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*limiter.Limits)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockILimitStorage_GetLimitsByTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLimitsByTypes'
type MockILimitStorage_GetLimitsByTypes_Call struct {
	*mock.Call
}

// GetLimitsByTypes is a helper method to define mock.On call
//   - _a0 []string
func (_e *MockILimitStorage_Expecter) GetLimitsByTypes(_a0 interface{}) *MockILimitStorage_GetLimitsByTypes_Call {
	return &MockILimitStorage_GetLimitsByTypes_Call{Call: _e.mock.On("GetLimitsByTypes", _a0)}
}

func (_c *MockILimitStorage_GetLimitsByTypes_Call) Run(run func(_a0 []string)) *MockILimitStorage_GetLimitsByTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockILimitStorage_GetLimitsByTypes_Call) Return(_a0 *limiter.Limits, _a1 error) *MockILimitStorage_GetLimitsByTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockILimitStorage_GetLimitsByTypes_Call) RunAndReturn(run func([]string) (*limiter.Limits, error)) *MockILimitStorage_GetLimitsByTypes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockILimitStorage creates a new instance of MockILimitStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILimitStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILimitStorage {
	mock := &MockILimitStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
