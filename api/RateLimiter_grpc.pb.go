// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: api/RateLimiter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RateLimiter_WhiteListAdd_FullMethodName    = "/RateLimiter.RateLimiter/WhiteListAdd"
	RateLimiter_WhiteListDelete_FullMethodName = "/RateLimiter.RateLimiter/WhiteListDelete"
	RateLimiter_BlackListAdd_FullMethodName    = "/RateLimiter.RateLimiter/BlackListAdd"
	RateLimiter_BlackListDelete_FullMethodName = "/RateLimiter.RateLimiter/BlackListDelete"
	RateLimiter_BucketReset_FullMethodName     = "/RateLimiter.RateLimiter/BucketReset"
	RateLimiter_LimitCheck_FullMethodName      = "/RateLimiter.RateLimiter/LimitCheck"
)

// RateLimiterClient is the client API for RateLimiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimiterClient interface {
	WhiteListAdd(ctx context.Context, in *WhiteListAddRequest, opts ...grpc.CallOption) (*WhiteListAddResponse, error)
	WhiteListDelete(ctx context.Context, in *WhiteListDeleteRequest, opts ...grpc.CallOption) (*WhiteListDeleteResponse, error)
	BlackListAdd(ctx context.Context, in *BlackListAddRequest, opts ...grpc.CallOption) (*BlackListAddResponse, error)
	BlackListDelete(ctx context.Context, in *BlackListDeleteRequest, opts ...grpc.CallOption) (*BlackListDeleteResponse, error)
	BucketReset(ctx context.Context, in *BucketResetRequest, opts ...grpc.CallOption) (*BucketResetResponse, error)
	LimitCheck(ctx context.Context, in *LimitCheckRequest, opts ...grpc.CallOption) (*LimitCheckResponse, error)
}

type rateLimiterClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimiterClient(cc grpc.ClientConnInterface) RateLimiterClient {
	return &rateLimiterClient{cc}
}

func (c *rateLimiterClient) WhiteListAdd(ctx context.Context, in *WhiteListAddRequest, opts ...grpc.CallOption) (*WhiteListAddResponse, error) {
	out := new(WhiteListAddResponse)
	err := c.cc.Invoke(ctx, RateLimiter_WhiteListAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) WhiteListDelete(ctx context.Context, in *WhiteListDeleteRequest, opts ...grpc.CallOption) (*WhiteListDeleteResponse, error) {
	out := new(WhiteListDeleteResponse)
	err := c.cc.Invoke(ctx, RateLimiter_WhiteListDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) BlackListAdd(ctx context.Context, in *BlackListAddRequest, opts ...grpc.CallOption) (*BlackListAddResponse, error) {
	out := new(BlackListAddResponse)
	err := c.cc.Invoke(ctx, RateLimiter_BlackListAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) BlackListDelete(ctx context.Context, in *BlackListDeleteRequest, opts ...grpc.CallOption) (*BlackListDeleteResponse, error) {
	out := new(BlackListDeleteResponse)
	err := c.cc.Invoke(ctx, RateLimiter_BlackListDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) BucketReset(ctx context.Context, in *BucketResetRequest, opts ...grpc.CallOption) (*BucketResetResponse, error) {
	out := new(BucketResetResponse)
	err := c.cc.Invoke(ctx, RateLimiter_BucketReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) LimitCheck(ctx context.Context, in *LimitCheckRequest, opts ...grpc.CallOption) (*LimitCheckResponse, error) {
	out := new(LimitCheckResponse)
	err := c.cc.Invoke(ctx, RateLimiter_LimitCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimiterServer is the server API for RateLimiter service.
// All implementations must embed UnimplementedRateLimiterServer
// for forward compatibility
type RateLimiterServer interface {
	WhiteListAdd(context.Context, *WhiteListAddRequest) (*WhiteListAddResponse, error)
	WhiteListDelete(context.Context, *WhiteListDeleteRequest) (*WhiteListDeleteResponse, error)
	BlackListAdd(context.Context, *BlackListAddRequest) (*BlackListAddResponse, error)
	BlackListDelete(context.Context, *BlackListDeleteRequest) (*BlackListDeleteResponse, error)
	BucketReset(context.Context, *BucketResetRequest) (*BucketResetResponse, error)
	LimitCheck(context.Context, *LimitCheckRequest) (*LimitCheckResponse, error)
	mustEmbedUnimplementedRateLimiterServer()
}

// UnimplementedRateLimiterServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimiterServer struct {
}

func (UnimplementedRateLimiterServer) WhiteListAdd(context.Context, *WhiteListAddRequest) (*WhiteListAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListAdd not implemented")
}
func (UnimplementedRateLimiterServer) WhiteListDelete(context.Context, *WhiteListDeleteRequest) (*WhiteListDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListDelete not implemented")
}
func (UnimplementedRateLimiterServer) BlackListAdd(context.Context, *BlackListAddRequest) (*BlackListAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackListAdd not implemented")
}
func (UnimplementedRateLimiterServer) BlackListDelete(context.Context, *BlackListDeleteRequest) (*BlackListDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackListDelete not implemented")
}
func (UnimplementedRateLimiterServer) BucketReset(context.Context, *BucketResetRequest) (*BucketResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketReset not implemented")
}
func (UnimplementedRateLimiterServer) LimitCheck(context.Context, *LimitCheckRequest) (*LimitCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitCheck not implemented")
}
func (UnimplementedRateLimiterServer) mustEmbedUnimplementedRateLimiterServer() {}

// UnsafeRateLimiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimiterServer will
// result in compilation errors.
type UnsafeRateLimiterServer interface {
	mustEmbedUnimplementedRateLimiterServer()
}

func RegisterRateLimiterServer(s grpc.ServiceRegistrar, srv RateLimiterServer) {
	s.RegisterService(&RateLimiter_ServiceDesc, srv)
}

func _RateLimiter_WhiteListAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteListAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).WhiteListAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_WhiteListAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).WhiteListAdd(ctx, req.(*WhiteListAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_WhiteListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).WhiteListDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_WhiteListDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).WhiteListDelete(ctx, req.(*WhiteListDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_BlackListAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackListAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).BlackListAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_BlackListAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).BlackListAdd(ctx, req.(*BlackListAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_BlackListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).BlackListDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_BlackListDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).BlackListDelete(ctx, req.(*BlackListDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_BucketReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).BucketReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_BucketReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).BucketReset(ctx, req.(*BucketResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_LimitCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).LimitCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimiter_LimitCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).LimitCheck(ctx, req.(*LimitCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimiter_ServiceDesc is the grpc.ServiceDesc for RateLimiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RateLimiter.RateLimiter",
	HandlerType: (*RateLimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhiteListAdd",
			Handler:    _RateLimiter_WhiteListAdd_Handler,
		},
		{
			MethodName: "WhiteListDelete",
			Handler:    _RateLimiter_WhiteListDelete_Handler,
		},
		{
			MethodName: "BlackListAdd",
			Handler:    _RateLimiter_BlackListAdd_Handler,
		},
		{
			MethodName: "BlackListDelete",
			Handler:    _RateLimiter_BlackListDelete_Handler,
		},
		{
			MethodName: "BucketReset",
			Handler:    _RateLimiter_BucketReset_Handler,
		},
		{
			MethodName: "LimitCheck",
			Handler:    _RateLimiter_LimitCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/RateLimiter.proto",
}
